// Final Generation Display - Clean results without streaming artifacts
import React, { useMemo } from 'react';
import { type GenerationPhase } from '../../services/resultAggregationService';
import { MarkdownRenderer } from '../utils/MarkdownRenderer';

interface FinalGenerationDisplayProps {
  phases: GenerationPhase[];
  className?: string;
  showMetadata?: boolean;
}

export const FinalGenerationDisplay: React.FC<FinalGenerationDisplayProps> = ({
  phases,
  className = '',
  showMetadata = false
}) => {
  // Sort phases in logical order
  const sortedPhases = useMemo(() => {
    const order = { 'analysis': 1, 'design': 2, 'implementation': 3, 'validation': 4 };
    return [...phases].sort((a, b) => (order[a.type] || 99) - (order[b.type] || 99));
  }, [phases]);

  const getPhaseIcon = (type: GenerationPhase['type']) => {
    const icons = {
      'analysis': '🔍',
      'design': '🏗️',
      'implementation': '⚙️',
      'validation': '✅'
    };
    return icons[type] || '📋';
  };

  const getPhaseColor = (type: GenerationPhase['type']) => {
    const colors = {
      'analysis': 'border-blue-200 bg-blue-50',
      'design': 'border-green-200 bg-green-50',
      'implementation': 'border-purple-200 bg-purple-50',
      'validation': 'border-yellow-200 bg-yellow-50'
    };
    return colors[type] || 'border-gray-200 bg-gray-50';
  };

  if (phases.length === 0) {
    return (
      <div className={`final-generation-display ${className}`}>
        <div className="text-center py-8 text-gray-500">
          No generation results available
        </div>
      </div>
    );
  }

  return (
    <div className={`final-generation-display space-y-6 ${className}`}>
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-gray-900">
          Database Generation Complete
        </h2>
        <div className="flex items-center space-x-2 text-sm text-gray-600">
          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
            ✅ {phases.length} phases completed
          </span>
        </div>
      </div>

      {/* Generation Phases */}
      <div className="space-y-4">
        {sortedPhases.map((phase, index) => (
          <div
            key={phase.id}
            className={`border rounded-lg p-6 ${getPhaseColor(phase.type)}`}
          >
            {/* Phase Header */}
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center space-x-3">
                <span className="text-2xl">{getPhaseIcon(phase.type)}</span>
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">
                    {phase.title}
                  </h3>
                  <p className="text-sm text-gray-600">
                    Generated by {phase.agent}
                  </p>
                </div>
              </div>
              
              {showMetadata && (
                <div className="text-right">
                  <div className="text-sm text-gray-500">
                    Phase {index + 1} of {phases.length}
                  </div>
                  {phase.confidence && (
                    <div className="text-xs text-gray-400">
                      Confidence: {Math.round(phase.confidence * 100)}%
                    </div>
                  )}
                </div>
              )}
            </div>

            {/* Phase Content */}
            <div className="prose prose-sm max-w-none">
              <MarkdownRenderer content={phase.content} />
            </div>

            {/* Phase Status */}
            <div className="mt-4 pt-4 border-t border-gray-200">
              <div className="flex items-center justify-between text-xs text-gray-500">
                <span className="inline-flex items-center">
                  <span className="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                  {phase.status === 'completed' ? 'Completed successfully' : phase.status}
                </span>
                <span className="uppercase tracking-wide">
                  {phase.type}
                </span>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Summary Footer */}
      <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 mt-6">
        <div className="flex items-center justify-between text-sm text-gray-600">
          <span>
            Generation completed with {phases.filter(p => p.status === 'completed').length} successful phases
          </span>
          <span className="text-xs text-gray-400">
            Ready for implementation
          </span>
        </div>
      </div>
    </div>
  );
};

export default FinalGenerationDisplay;